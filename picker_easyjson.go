// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package picker

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson390b7126DecodeGithubComChancedPicker(in *jlexer.Lexer, out *wktVal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wkt":
			out.WKT = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker(out *jwriter.Writer, in wktVal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wkt\":"
		out.RawString(prefix[1:])
		out.String(string(in.WKT))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wktVal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wktVal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wktVal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wktVal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker1(in *jlexer.Lexer, out *termsSetQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_name":
			out.Name = string(in.String())
		case "terms":
			if in.IsNull() {
				in.Skip()
				out.Terms = nil
			} else {
				in.Delim('[')
				if out.Terms == nil {
					if !in.IsDelim(']') {
						out.Terms = make([]string, 0, 4)
					} else {
						out.Terms = []string{}
					}
				} else {
					out.Terms = (out.Terms)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Terms = append(out.Terms, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minimum_should_match_field":
			out.MinimumShouldMatchField = string(in.String())
		case "minimum_should_match_script":
			if in.IsNull() {
				in.Skip()
				out.MinimumShouldMatchScript = nil
			} else {
				if out.MinimumShouldMatchScript == nil {
					out.MinimumShouldMatchScript = new(Script)
				}
				easyjson390b7126DecodeGithubComChancedPicker2(in, out.MinimumShouldMatchScript)
			}
		case "boost":
			if m, ok := out.Boost.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Boost.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Boost = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker1(out *jwriter.Writer, in termsSetQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"terms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Terms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Terms {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if in.MinimumShouldMatchField != "" {
		const prefix string = ",\"minimum_should_match_field\":"
		out.RawString(prefix)
		out.String(string(in.MinimumShouldMatchField))
	}
	if in.MinimumShouldMatchScript != nil {
		const prefix string = ",\"minimum_should_match_script\":"
		out.RawString(prefix)
		easyjson390b7126EncodeGithubComChancedPicker2(out, *in.MinimumShouldMatchScript)
	}
	if in.Boost != nil {
		const prefix string = ",\"boost\":"
		out.RawString(prefix)
		if m, ok := in.Boost.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Boost.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Boost))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v termsSetQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v termsSetQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *termsSetQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *termsSetQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker1(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker2(in *jlexer.Lexer, out *Script) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lang":
			out.Lang = string(in.String())
		case "Source":
			out.Source = string(in.String())
		case "Params":
			if m, ok := out.Params.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Params.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Params = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker2(out *jwriter.Writer, in Script) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lang\":"
		out.RawString(prefix[1:])
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"Source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"Params\":"
		out.RawString(prefix)
		if m, ok := in.Params.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Params.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Params))
		}
	}
	out.RawByte('}')
}
func easyjson390b7126DecodeGithubComChancedPicker3(in *jlexer.Lexer, out *simpleQueryStringQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "flags":
			out.Flags = string(in.String())
		case "analyze_wildcard":
			if m, ok := out.AnalyzeWildcard.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AnalyzeWildcard.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AnalyzeWildcard = in.Interface()
			}
		case "analyzer":
			out.Analyzer = string(in.String())
		case "auto_generate_synonyms_phrase_query":
			if m, ok := out.AutoGenerateSynonymsPhraseQuery.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AutoGenerateSynonymsPhraseQuery.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AutoGenerateSynonymsPhraseQuery = in.Interface()
			}
		case "boost":
			if m, ok := out.Boost.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Boost.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Boost = in.Interface()
			}
		case "default_operator":
			out.DefaultOperator = Operator(in.String())
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Fields = append(out.Fields, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fuzzy_prefix_length":
			if m, ok := out.FuzzyPrefixLength.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FuzzyPrefixLength.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FuzzyPrefixLength = in.Interface()
			}
		case "fuzzy_max_expansions":
			if m, ok := out.FuzzyMaxExpansions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FuzzyMaxExpansions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FuzzyMaxExpansions = in.Interface()
			}
		case "fuzzy_transpositions":
			if m, ok := out.FuzzyTranspositions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FuzzyTranspositions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FuzzyTranspositions = in.Interface()
			}
		case "lenient":
			out.Lenient = bool(in.Bool())
		case "max_determinized_states":
			if m, ok := out.MaxDeterminizedStates.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxDeterminizedStates.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxDeterminizedStates = in.Interface()
			}
		case "minimum_should_match":
			out.MinimumShouldMatch = string(in.String())
		case "quote_analyzer":
			out.QuoteAnalyzer = string(in.String())
		case "phrase_slop":
			if m, ok := out.PhraseSlop.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PhraseSlop.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PhraseSlop = in.Interface()
			}
		case "quote_field_suffix":
			out.QuoteFieldSuffix = string(in.String())
		case "_name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker3(out *jwriter.Writer, in simpleQueryStringQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.Flags != "" {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.String(string(in.Flags))
	}
	if in.AnalyzeWildcard != nil {
		const prefix string = ",\"analyze_wildcard\":"
		out.RawString(prefix)
		if m, ok := in.AnalyzeWildcard.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AnalyzeWildcard.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AnalyzeWildcard))
		}
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.AutoGenerateSynonymsPhraseQuery != nil {
		const prefix string = ",\"auto_generate_synonyms_phrase_query\":"
		out.RawString(prefix)
		if m, ok := in.AutoGenerateSynonymsPhraseQuery.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AutoGenerateSynonymsPhraseQuery.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AutoGenerateSynonymsPhraseQuery))
		}
	}
	if in.Boost != nil {
		const prefix string = ",\"boost\":"
		out.RawString(prefix)
		if m, ok := in.Boost.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Boost.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Boost))
		}
	}
	if in.DefaultOperator != "" {
		const prefix string = ",\"default_operator\":"
		out.RawString(prefix)
		out.String(string(in.DefaultOperator))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Fields {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.FuzzyPrefixLength != nil {
		const prefix string = ",\"fuzzy_prefix_length\":"
		out.RawString(prefix)
		if m, ok := in.FuzzyPrefixLength.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FuzzyPrefixLength.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FuzzyPrefixLength))
		}
	}
	if in.FuzzyMaxExpansions != nil {
		const prefix string = ",\"fuzzy_max_expansions\":"
		out.RawString(prefix)
		if m, ok := in.FuzzyMaxExpansions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FuzzyMaxExpansions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FuzzyMaxExpansions))
		}
	}
	if in.FuzzyTranspositions != nil {
		const prefix string = ",\"fuzzy_transpositions\":"
		out.RawString(prefix)
		if m, ok := in.FuzzyTranspositions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FuzzyTranspositions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FuzzyTranspositions))
		}
	}
	if in.Lenient {
		const prefix string = ",\"lenient\":"
		out.RawString(prefix)
		out.Bool(bool(in.Lenient))
	}
	if in.MaxDeterminizedStates != nil {
		const prefix string = ",\"max_determinized_states\":"
		out.RawString(prefix)
		if m, ok := in.MaxDeterminizedStates.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxDeterminizedStates.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxDeterminizedStates))
		}
	}
	if in.MinimumShouldMatch != "" {
		const prefix string = ",\"minimum_should_match\":"
		out.RawString(prefix)
		out.String(string(in.MinimumShouldMatch))
	}
	if in.QuoteAnalyzer != "" {
		const prefix string = ",\"quote_analyzer\":"
		out.RawString(prefix)
		out.String(string(in.QuoteAnalyzer))
	}
	if in.PhraseSlop != nil {
		const prefix string = ",\"phrase_slop\":"
		out.RawString(prefix)
		if m, ok := in.PhraseSlop.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PhraseSlop.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PhraseSlop))
		}
	}
	if in.QuoteFieldSuffix != "" {
		const prefix string = ",\"quote_field_suffix\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFieldSuffix))
	}
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v simpleQueryStringQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v simpleQueryStringQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *simpleQueryStringQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *simpleQueryStringQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker3(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker4(in *jlexer.Lexer, out *shapeQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_name":
			out.Name = string(in.String())
		case "relation":
			out.Relation = SpatialRelation(in.String())
		case "shape":
			if m, ok := out.Shape.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Shape.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Shape = in.Interface()
			}
		case "indexed_shape":
			if in.IsNull() {
				in.Skip()
				out.IndexedShape = nil
			} else {
				if out.IndexedShape == nil {
					out.IndexedShape = new(IndexedShape)
				}
				(*out.IndexedShape).UnmarshalEasyJSON(in)
			}
		case "ignore_unmapped":
			out.IgnoreUnmapped = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker4(out *jwriter.Writer, in shapeQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Relation))
	}
	if in.Shape != nil {
		const prefix string = ",\"shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Shape.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Shape.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Shape))
		}
	}
	if in.IndexedShape != nil {
		const prefix string = ",\"indexed_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IndexedShape).MarshalEasyJSON(out)
	}
	if in.IgnoreUnmapped {
		const prefix string = ",\"ignore_unmapped\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreUnmapped))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v shapeQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v shapeQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *shapeQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *shapeQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker4(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker5(in *jlexer.Lexer, out *queryStringQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "default_field":
			out.DefaultField = string(in.String())
		case "allow_leading_wildcard":
			if m, ok := out.AllowLeadingWildcard.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AllowLeadingWildcard.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AllowLeadingWildcard = in.Interface()
			}
		case "analyze_wildcard":
			if m, ok := out.AnalyzeWildcard.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AnalyzeWildcard.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AnalyzeWildcard = in.Interface()
			}
		case "analyzer":
			out.Analyzer = string(in.String())
		case "auto_generate_synonyms_phrase_query":
			if m, ok := out.AutoGenerateSynonymsPhraseQuery.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AutoGenerateSynonymsPhraseQuery.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AutoGenerateSynonymsPhraseQuery = in.Interface()
			}
		case "boost":
			if m, ok := out.Boost.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Boost.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Boost = in.Interface()
			}
		case "default_operator":
			out.DefaultOperator = Operator(in.String())
		case "enable_position_increments":
			if m, ok := out.EnablePositionIncrements.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.EnablePositionIncrements.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.EnablePositionIncrements = in.Interface()
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Fields = append(out.Fields, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fuzziness":
			out.Fuzziness = string(in.String())
		case "fuzzy_max_expansions":
			if m, ok := out.FuzzyMaxExpansions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FuzzyMaxExpansions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FuzzyMaxExpansions = in.Interface()
			}
		case "fuzzy_transpositions":
			if m, ok := out.FuzzyTranspositions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FuzzyTranspositions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FuzzyTranspositions = in.Interface()
			}
		case "lenient":
			out.Lenient = bool(in.Bool())
		case "max_determinized_states":
			if m, ok := out.MaxDeterminizedStates.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxDeterminizedStates.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxDeterminizedStates = in.Interface()
			}
		case "minimum_should_match":
			out.MinimumShouldMatch = string(in.String())
		case "quote_analyzer":
			out.QuoteAnalyzer = string(in.String())
		case "phrase_slop":
			if m, ok := out.PhraseSlop.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PhraseSlop.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PhraseSlop = in.Interface()
			}
		case "quote_field_suffix":
			out.QuoteFieldSuffix = string(in.String())
		case "rewrite":
			out.Rewrite = Rewrite(in.String())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "tie_breaker":
			if m, ok := out.TieBreaker.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.TieBreaker.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.TieBreaker = in.Interface()
			}
		case "_name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker5(out *jwriter.Writer, in queryStringQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.DefaultField != "" {
		const prefix string = ",\"default_field\":"
		out.RawString(prefix)
		out.String(string(in.DefaultField))
	}
	if in.AllowLeadingWildcard != nil {
		const prefix string = ",\"allow_leading_wildcard\":"
		out.RawString(prefix)
		if m, ok := in.AllowLeadingWildcard.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AllowLeadingWildcard.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AllowLeadingWildcard))
		}
	}
	if in.AnalyzeWildcard != nil {
		const prefix string = ",\"analyze_wildcard\":"
		out.RawString(prefix)
		if m, ok := in.AnalyzeWildcard.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AnalyzeWildcard.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AnalyzeWildcard))
		}
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.AutoGenerateSynonymsPhraseQuery != nil {
		const prefix string = ",\"auto_generate_synonyms_phrase_query\":"
		out.RawString(prefix)
		if m, ok := in.AutoGenerateSynonymsPhraseQuery.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AutoGenerateSynonymsPhraseQuery.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AutoGenerateSynonymsPhraseQuery))
		}
	}
	if in.Boost != nil {
		const prefix string = ",\"boost\":"
		out.RawString(prefix)
		if m, ok := in.Boost.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Boost.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Boost))
		}
	}
	if in.DefaultOperator != "" {
		const prefix string = ",\"default_operator\":"
		out.RawString(prefix)
		out.String(string(in.DefaultOperator))
	}
	if in.EnablePositionIncrements != nil {
		const prefix string = ",\"enable_position_increments\":"
		out.RawString(prefix)
		if m, ok := in.EnablePositionIncrements.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.EnablePositionIncrements.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.EnablePositionIncrements))
		}
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Fields {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Fuzziness != "" {
		const prefix string = ",\"fuzziness\":"
		out.RawString(prefix)
		out.String(string(in.Fuzziness))
	}
	if in.FuzzyMaxExpansions != nil {
		const prefix string = ",\"fuzzy_max_expansions\":"
		out.RawString(prefix)
		if m, ok := in.FuzzyMaxExpansions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FuzzyMaxExpansions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FuzzyMaxExpansions))
		}
	}
	if in.FuzzyTranspositions != nil {
		const prefix string = ",\"fuzzy_transpositions\":"
		out.RawString(prefix)
		if m, ok := in.FuzzyTranspositions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FuzzyTranspositions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FuzzyTranspositions))
		}
	}
	if in.Lenient {
		const prefix string = ",\"lenient\":"
		out.RawString(prefix)
		out.Bool(bool(in.Lenient))
	}
	if in.MaxDeterminizedStates != nil {
		const prefix string = ",\"max_determinized_states\":"
		out.RawString(prefix)
		if m, ok := in.MaxDeterminizedStates.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxDeterminizedStates.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxDeterminizedStates))
		}
	}
	if in.MinimumShouldMatch != "" {
		const prefix string = ",\"minimum_should_match\":"
		out.RawString(prefix)
		out.String(string(in.MinimumShouldMatch))
	}
	if in.QuoteAnalyzer != "" {
		const prefix string = ",\"quote_analyzer\":"
		out.RawString(prefix)
		out.String(string(in.QuoteAnalyzer))
	}
	if in.PhraseSlop != nil {
		const prefix string = ",\"phrase_slop\":"
		out.RawString(prefix)
		if m, ok := in.PhraseSlop.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PhraseSlop.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PhraseSlop))
		}
	}
	if in.QuoteFieldSuffix != "" {
		const prefix string = ",\"quote_field_suffix\":"
		out.RawString(prefix)
		out.String(string(in.QuoteFieldSuffix))
	}
	if in.Rewrite != "" {
		const prefix string = ",\"rewrite\":"
		out.RawString(prefix)
		out.String(string(in.Rewrite))
	}
	if in.TimeZone != "" {
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	if in.TieBreaker != nil {
		const prefix string = ",\"tie_breaker\":"
		out.RawString(prefix)
		if m, ok := in.TieBreaker.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.TieBreaker.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.TieBreaker))
		}
	}
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v queryStringQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryStringQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *queryStringQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryStringQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker5(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker6(in *jlexer.Lexer, out *prefixRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prefix":
			out.Prefix = string(in.String())
		case "analyzer":
			out.Analyzer = string(in.String())
		case "filter":
			if in.IsNull() {
				in.Skip()
				out.Filter = nil
			} else {
				if out.Filter == nil {
					out.Filter = new(RuleFilter)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Filter).UnmarshalJSON(data))
				}
			}
		case "use_field":
			out.UseField = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker6(out *jwriter.Writer, in prefixRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"prefix\":"
		out.RawString(prefix[1:])
		out.String(string(in.Prefix))
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.Filter != nil {
		const prefix string = ",\"filter\":"
		out.RawString(prefix)
		out.Raw((*in.Filter).MarshalJSON())
	}
	if in.UseField != "" {
		const prefix string = ",\"use_field\":"
		out.RawString(prefix)
		out.String(string(in.UseField))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v prefixRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v prefixRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *prefixRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *prefixRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker6(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker7(in *jlexer.Lexer, out *percolateQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "_name":
			out.UName = string(in.String())
		case "document":
			if m, ok := out.Document.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Document.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Document = in.Interface()
			}
		case "documents":
			if m, ok := out.Documents.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Documents.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Documents = in.Interface()
			}
		case "document_type":
			out.DocumentType = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "routing":
			out.Routing = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "preference":
			out.Preference = string(in.String())
		case "version":
			out.Version = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker7(out *jwriter.Writer, in percolateQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.UName != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.UName))
	}
	if in.Document != nil {
		const prefix string = ",\"document\":"
		out.RawString(prefix)
		if m, ok := in.Document.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Document.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Document))
		}
	}
	if in.Documents != nil {
		const prefix string = ",\"documents\":"
		out.RawString(prefix)
		if m, ok := in.Documents.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Documents.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Documents))
		}
	}
	if in.DocumentType != "" {
		const prefix string = ",\"document_type\":"
		out.RawString(prefix)
		out.String(string(in.DocumentType))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	if in.Routing != "" {
		const prefix string = ",\"routing\":"
		out.RawString(prefix)
		out.String(string(in.Routing))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.Preference != "" {
		const prefix string = ",\"preference\":"
		out.RawString(prefix)
		out.String(string(in.Preference))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v percolateQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v percolateQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *percolateQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *percolateQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker7(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker8(in *jlexer.Lexer, out *parentIDQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_name":
			out.Name = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "ignore_unmapped":
			if m, ok := out.IgnoreUnmapped.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreUnmapped.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreUnmapped = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker8(out *jwriter.Writer, in parentIDQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.IgnoreUnmapped != nil {
		const prefix string = ",\"ignore_unmapped\":"
		out.RawString(prefix)
		if m, ok := in.IgnoreUnmapped.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreUnmapped.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreUnmapped))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v parentIDQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v parentIDQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *parentIDQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *parentIDQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker8(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker9(in *jlexer.Lexer, out *numericRangeField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coerce":
			if m, ok := out.Coerce.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coerce.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coerce = in.Interface()
			}
		case "index":
			if m, ok := out.Index.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Index.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Index = in.Interface()
			}
		case "store":
			if m, ok := out.Store.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Store.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Store = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker9(out *jwriter.Writer, in numericRangeField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Coerce != nil {
		const prefix string = ",\"coerce\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Coerce.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coerce.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coerce))
		}
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Index.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Index.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Index))
		}
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Store.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Store.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Store))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v numericRangeField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v numericRangeField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *numericRangeField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *numericRangeField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker9(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker10(in *jlexer.Lexer, out *nestedQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_name":
			out.Name = string(in.String())
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(Query)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Query).UnmarshalJSON(data))
				}
			}
		case "path":
			out.Path = string(in.String())
		case "score_mode":
			out.ScoreMode = ScoreMode(in.String())
		case "ignore_unmapped":
			if m, ok := out.IgnoreUnmapped.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreUnmapped.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreUnmapped = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker10(out *jwriter.Writer, in nestedQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Query == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Query).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.ScoreMode != "" {
		const prefix string = ",\"score_mode\":"
		out.RawString(prefix)
		out.String(string(in.ScoreMode))
	}
	if in.IgnoreUnmapped != nil {
		const prefix string = ",\"ignore_unmapped\":"
		out.RawString(prefix)
		if m, ok := in.IgnoreUnmapped.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreUnmapped.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreUnmapped))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v nestedQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v nestedQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *nestedQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *nestedQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker10(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker11(in *jlexer.Lexer, out *moreLikeThisQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_name":
			out.Name = string(in.String())
		case "like":
			if m, ok := out.Like.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Like.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Like = in.Interface()
			}
		case "unlike":
			if m, ok := out.Unlike.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Unlike.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Unlike = in.Interface()
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Fields = append(out.Fields, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_query_terms":
			if m, ok := out.MaxQueryTerms.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxQueryTerms.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxQueryTerms = in.Interface()
			}
		case "min_term_freq":
			if m, ok := out.MinTermFrequency.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MinTermFrequency.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MinTermFrequency = in.Interface()
			}
		case "min_doc_freq":
			if m, ok := out.MinDocFrequency.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MinDocFrequency.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MinDocFrequency = in.Interface()
			}
		case "max_doc_freq":
			if m, ok := out.MaxDocFrequency.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxDocFrequency.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxDocFrequency = in.Interface()
			}
		case "min_word_length":
			if m, ok := out.MinWordLength.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MinWordLength.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MinWordLength = in.Interface()
			}
		case "max_word_length":
			if m, ok := out.MaxWordLength.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxWordLength.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxWordLength = in.Interface()
			}
		case "minimum_should_match":
			out.MinimumShouldMatch = string(in.String())
		case "stop_words":
			if in.IsNull() {
				in.Skip()
				out.StopWords = nil
			} else {
				in.Delim('[')
				if out.StopWords == nil {
					if !in.IsDelim(']') {
						out.StopWords = make([]string, 0, 4)
					} else {
						out.StopWords = []string{}
					}
				} else {
					out.StopWords = (out.StopWords)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.StopWords = append(out.StopWords, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "analyzer":
			out.Analyzer = string(in.String())
		case "fail_on_unsupported_field":
			if m, ok := out.FailOnUnsupportedField.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FailOnUnsupportedField.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FailOnUnsupportedField = in.Interface()
			}
		case "boost_terms":
			if m, ok := out.BoostTerms.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.BoostTerms.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.BoostTerms = in.Interface()
			}
		case "include":
			if m, ok := out.Include.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Include.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Include = in.Interface()
			}
		case "boost":
			if m, ok := out.Boost.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Boost.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Boost = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker11(out *jwriter.Writer, in moreLikeThisQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"like\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Like.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Like.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Like))
		}
	}
	if in.Unlike != nil {
		const prefix string = ",\"unlike\":"
		out.RawString(prefix)
		if m, ok := in.Unlike.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Unlike.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Unlike))
		}
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Fields {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if in.MaxQueryTerms != nil {
		const prefix string = ",\"max_query_terms\":"
		out.RawString(prefix)
		if m, ok := in.MaxQueryTerms.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxQueryTerms.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxQueryTerms))
		}
	}
	if in.MinTermFrequency != nil {
		const prefix string = ",\"min_term_freq\":"
		out.RawString(prefix)
		if m, ok := in.MinTermFrequency.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MinTermFrequency.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MinTermFrequency))
		}
	}
	if in.MinDocFrequency != nil {
		const prefix string = ",\"min_doc_freq\":"
		out.RawString(prefix)
		if m, ok := in.MinDocFrequency.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MinDocFrequency.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MinDocFrequency))
		}
	}
	if in.MaxDocFrequency != nil {
		const prefix string = ",\"max_doc_freq\":"
		out.RawString(prefix)
		if m, ok := in.MaxDocFrequency.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxDocFrequency.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxDocFrequency))
		}
	}
	if in.MinWordLength != nil {
		const prefix string = ",\"min_word_length\":"
		out.RawString(prefix)
		if m, ok := in.MinWordLength.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MinWordLength.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MinWordLength))
		}
	}
	if in.MaxWordLength != nil {
		const prefix string = ",\"max_word_length\":"
		out.RawString(prefix)
		if m, ok := in.MaxWordLength.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxWordLength.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxWordLength))
		}
	}
	if in.MinimumShouldMatch != "" {
		const prefix string = ",\"minimum_should_match\":"
		out.RawString(prefix)
		out.String(string(in.MinimumShouldMatch))
	}
	if len(in.StopWords) != 0 {
		const prefix string = ",\"stop_words\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.StopWords {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.FailOnUnsupportedField != nil {
		const prefix string = ",\"fail_on_unsupported_field\":"
		out.RawString(prefix)
		if m, ok := in.FailOnUnsupportedField.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FailOnUnsupportedField.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FailOnUnsupportedField))
		}
	}
	if in.BoostTerms != nil {
		const prefix string = ",\"boost_terms\":"
		out.RawString(prefix)
		if m, ok := in.BoostTerms.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.BoostTerms.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.BoostTerms))
		}
	}
	if in.Include != nil {
		const prefix string = ",\"include\":"
		out.RawString(prefix)
		if m, ok := in.Include.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Include.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Include))
		}
	}
	if in.Boost != nil {
		const prefix string = ",\"boost\":"
		out.RawString(prefix)
		if m, ok := in.Boost.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Boost.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Boost))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v moreLikeThisQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v moreLikeThisQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *moreLikeThisQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *moreLikeThisQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker11(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker12(in *jlexer.Lexer, out *matchRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "max_gaps":
			if m, ok := out.MaxGaps.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxGaps.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxGaps = in.Interface()
			}
		case "ordered":
			if m, ok := out.Ordered.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ordered.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ordered = in.Interface()
			}
		case "analyzer":
			out.Analyzer = string(in.String())
		case "filter":
			if in.IsNull() {
				in.Skip()
				out.Filter = nil
			} else {
				if out.Filter == nil {
					out.Filter = new(RuleFilter)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Filter).UnmarshalJSON(data))
				}
			}
		case "use_field":
			out.UseField = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker12(out *jwriter.Writer, in matchRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.MaxGaps != nil {
		const prefix string = ",\"max_gaps\":"
		out.RawString(prefix)
		if m, ok := in.MaxGaps.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxGaps.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxGaps))
		}
	}
	if in.Ordered != nil {
		const prefix string = ",\"ordered\":"
		out.RawString(prefix)
		if m, ok := in.Ordered.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ordered.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ordered))
		}
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.Filter != nil {
		const prefix string = ",\"filter\":"
		out.RawString(prefix)
		out.Raw((*in.Filter).MarshalJSON())
	}
	if in.UseField != "" {
		const prefix string = ",\"use_field\":"
		out.RawString(prefix)
		out.String(string(in.UseField))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v matchRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v matchRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *matchRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *matchRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker12(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker13(in *jlexer.Lexer, out *matchPhraseQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "analyzer":
			out.Analyzer = string(in.String())
		case "_name":
			out.Name = string(in.String())
		case "zero_terms_query":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ZeroTerms).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker13(out *jwriter.Writer, in matchPhraseQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.ZeroTerms != "" {
		const prefix string = ",\"zero_terms_query\":"
		out.RawString(prefix)
		out.Raw((in.ZeroTerms).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v matchPhraseQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v matchPhraseQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *matchPhraseQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *matchPhraseQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker13(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker14(in *jlexer.Lexer, out *matchPhrasePrefixQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "minimum_should_match":
			out.MinimumShouldMatch = string(in.String())
		case "analyzer":
			out.Analyzer = string(in.String())
		case "_name":
			out.Name = string(in.String())
		case "max_expansions":
			if m, ok := out.MaxExpansions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxExpansions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxExpansions = in.Interface()
			}
		case "zero_terms_query":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ZeroTermsQuery).UnmarshalJSON(data))
			}
		case "slop":
			if m, ok := out.Slop.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Slop.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Slop = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker14(out *jwriter.Writer, in matchPhrasePrefixQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.MinimumShouldMatch != "" {
		const prefix string = ",\"minimum_should_match\":"
		out.RawString(prefix)
		out.String(string(in.MinimumShouldMatch))
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.MaxExpansions != nil {
		const prefix string = ",\"max_expansions\":"
		out.RawString(prefix)
		if m, ok := in.MaxExpansions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxExpansions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxExpansions))
		}
	}
	if in.ZeroTermsQuery != "" {
		const prefix string = ",\"zero_terms_query\":"
		out.RawString(prefix)
		out.Raw((in.ZeroTermsQuery).MarshalJSON())
	}
	if in.Slop != nil {
		const prefix string = ",\"slop\":"
		out.RawString(prefix)
		if m, ok := in.Slop.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Slop.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Slop))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v matchPhrasePrefixQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v matchPhrasePrefixQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *matchPhrasePrefixQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *matchPhrasePrefixQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker14(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker15(in *jlexer.Lexer, out *matchBoolPrefixQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "minimum_should_match":
			out.MinimumShouldMatch = string(in.String())
		case "operator":
			out.Operator = Operator(in.String())
		case "analyzer":
			out.Analyzer = string(in.String())
		case "fuzziness":
			out.Fuzziness = string(in.String())
		case "prefix_length":
			if m, ok := out.PrefixLength.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PrefixLength.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PrefixLength = in.Interface()
			}
		case "fuzzy_transpositions":
			if m, ok := out.FuzzyTranspositions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FuzzyTranspositions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FuzzyTranspositions = in.Interface()
			}
		case "_name":
			out.Name = string(in.String())
		case "max_expansions":
			if m, ok := out.MaxExpansions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxExpansions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxExpansions = in.Interface()
			}
		case "fuzzy_rewrite":
			out.FuzzyRewrite = Rewrite(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker15(out *jwriter.Writer, in matchBoolPrefixQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.MinimumShouldMatch != "" {
		const prefix string = ",\"minimum_should_match\":"
		out.RawString(prefix)
		out.String(string(in.MinimumShouldMatch))
	}
	if in.Operator != "" {
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.Fuzziness != "" {
		const prefix string = ",\"fuzziness\":"
		out.RawString(prefix)
		out.String(string(in.Fuzziness))
	}
	if in.PrefixLength != nil {
		const prefix string = ",\"prefix_length\":"
		out.RawString(prefix)
		if m, ok := in.PrefixLength.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PrefixLength.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PrefixLength))
		}
	}
	if in.FuzzyTranspositions != nil {
		const prefix string = ",\"fuzzy_transpositions\":"
		out.RawString(prefix)
		if m, ok := in.FuzzyTranspositions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FuzzyTranspositions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FuzzyTranspositions))
		}
	}
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.MaxExpansions != nil {
		const prefix string = ",\"max_expansions\":"
		out.RawString(prefix)
		if m, ok := in.MaxExpansions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxExpansions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxExpansions))
		}
	}
	if in.FuzzyRewrite != "" {
		const prefix string = ",\"fuzzy_rewrite\":"
		out.RawString(prefix)
		out.String(string(in.FuzzyRewrite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v matchBoolPrefixQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v matchBoolPrefixQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *matchBoolPrefixQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *matchBoolPrefixQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker15(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker16(in *jlexer.Lexer, out *ipRangeField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coerce":
			if m, ok := out.Coerce.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coerce.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coerce = in.Interface()
			}
		case "index":
			if m, ok := out.Index.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Index.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Index = in.Interface()
			}
		case "store":
			if m, ok := out.Store.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Store.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Store = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker16(out *jwriter.Writer, in ipRangeField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Coerce != nil {
		const prefix string = ",\"coerce\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Coerce.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coerce.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coerce))
		}
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Index.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Index.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Index))
		}
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Store.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Store.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Store))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ipRangeField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ipRangeField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ipRangeField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ipRangeField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker16(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker17(in *jlexer.Lexer, out *idsQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Values = append(out.Values, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "_name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker17(out *jwriter.Writer, in idsQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Values {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v idsQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v idsQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *idsQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *idsQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker17(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker18(in *jlexer.Lexer, out *histogramField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker18(out *jwriter.Writer, in histogramField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v histogramField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v histogramField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *histogramField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *histogramField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker18(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker19(in *jlexer.Lexer, out *geoShapeQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_name":
			out.Name = string(in.String())
		case "relation":
			out.Relation = SpatialRelation(in.String())
		case "shape":
			if m, ok := out.Shape.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Shape.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Shape = in.Interface()
			}
		case "indexed_shape":
			if in.IsNull() {
				in.Skip()
				out.IndexedShape = nil
			} else {
				if out.IndexedShape == nil {
					out.IndexedShape = new(IndexedShape)
				}
				(*out.IndexedShape).UnmarshalEasyJSON(in)
			}
		case "ignore_unmapped":
			out.IgnoreUnmapped = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker19(out *jwriter.Writer, in geoShapeQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Relation))
	}
	if in.Shape != nil {
		const prefix string = ",\"shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Shape.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Shape.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Shape))
		}
	}
	if in.IndexedShape != nil {
		const prefix string = ",\"indexed_shape\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IndexedShape).MarshalEasyJSON(out)
	}
	if in.IgnoreUnmapped {
		const prefix string = ",\"ignore_unmapped\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreUnmapped))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v geoShapeQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v geoShapeQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *geoShapeQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *geoShapeQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker19(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker20(in *jlexer.Lexer, out *geoShapeField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orientation":
			out.Orientation = Orientation(in.String())
		case "ignore_malformed":
			if m, ok := out.IgnoreMalformed.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreMalformed.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreMalformed = in.Interface()
			}
		case "ignore_z_value":
			if m, ok := out.IgnoreZValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreZValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreZValue = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker20(out *jwriter.Writer, in geoShapeField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Orientation != "" {
		const prefix string = ",\"orientation\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Orientation))
	}
	if in.IgnoreMalformed != nil {
		const prefix string = ",\"ignore_malformed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.IgnoreMalformed.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreMalformed.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreMalformed))
		}
	}
	if in.IgnoreZValue != nil {
		const prefix string = ",\"ignore_z_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.IgnoreZValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreZValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreZValue))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v geoShapeField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v geoShapeField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *geoShapeField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *geoShapeField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker20(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker21(in *jlexer.Lexer, out *geoPointField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ignore_malformed":
			if m, ok := out.IgnoreMalformed.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreMalformed.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreMalformed = in.Interface()
			}
		case "ignore_z_value":
			if m, ok := out.IgnoreZValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreZValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreZValue = in.Interface()
			}
		case "null_value":
			if m, ok := out.NullValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NullValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NullValue = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker21(out *jwriter.Writer, in geoPointField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IgnoreMalformed != nil {
		const prefix string = ",\"ignore_malformed\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.IgnoreMalformed.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreMalformed.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreMalformed))
		}
	}
	if in.IgnoreZValue != nil {
		const prefix string = ",\"ignore_z_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.IgnoreZValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreZValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreZValue))
		}
	}
	if in.NullValue != nil {
		const prefix string = ",\"null_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.NullValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NullValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NullValue))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v geoPointField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v geoPointField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *geoPointField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *geoPointField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker21(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker22(in *jlexer.Lexer, out *fuzzyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "term":
			out.Term = string(in.String())
		case "analyzer":
			out.Analyzer = string(in.String())
		case "filter":
			if in.IsNull() {
				in.Skip()
				out.Filter = nil
			} else {
				if out.Filter == nil {
					out.Filter = new(RuleFilter)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Filter).UnmarshalJSON(data))
				}
			}
		case "use_field":
			out.UseField = string(in.String())
		case "prefix_length":
			out.PrefixLength = int(in.Int())
		case "fuzziness":
			out.Fuzziness = string(in.String())
		case "transpositions":
			if m, ok := out.Transpositions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Transpositions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Transpositions = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker22(out *jwriter.Writer, in fuzzyRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"term\":"
		out.RawString(prefix[1:])
		out.String(string(in.Term))
	}
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		out.RawString(prefix)
		out.String(string(in.Analyzer))
	}
	if in.Filter != nil {
		const prefix string = ",\"filter\":"
		out.RawString(prefix)
		out.Raw((*in.Filter).MarshalJSON())
	}
	if in.UseField != "" {
		const prefix string = ",\"use_field\":"
		out.RawString(prefix)
		out.String(string(in.UseField))
	}
	if in.PrefixLength != 0 {
		const prefix string = ",\"prefix_length\":"
		out.RawString(prefix)
		out.Int(int(in.PrefixLength))
	}
	if in.Fuzziness != "" {
		const prefix string = ",\"fuzziness\":"
		out.RawString(prefix)
		out.String(string(in.Fuzziness))
	}
	if in.Transpositions != nil {
		const prefix string = ",\"transpositions\":"
		out.RawString(prefix)
		if m, ok := in.Transpositions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Transpositions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Transpositions))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v fuzzyRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v fuzzyRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *fuzzyRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *fuzzyRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker22(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker23(in *jlexer.Lexer, out *flattenedField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "depth_limit":
			if m, ok := out.DepthLimit.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DepthLimit.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DepthLimit = in.Interface()
			}
		case "doc_values":
			if m, ok := out.DocValues.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DocValues.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DocValues = in.Interface()
			}
		case "eager_global_ordinals":
			if m, ok := out.EagerGlobalOrdinals.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.EagerGlobalOrdinals.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.EagerGlobalOrdinals = in.Interface()
			}
		case "ignore_above":
			if m, ok := out.IgnoreAbove.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreAbove.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreAbove = in.Interface()
			}
		case "index":
			if m, ok := out.Index.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Index.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Index = in.Interface()
			}
		case "index_options":
			out.IndexOptions = IndexOptions(in.String())
		case "null_value":
			if m, ok := out.NullValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NullValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NullValue = in.Interface()
			}
		case "similarity":
			out.Similarity = Similarity(in.String())
		case "split_queries_on_whitespace":
			if m, ok := out.SplitQueriesOnWhitespace.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SplitQueriesOnWhitespace.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SplitQueriesOnWhitespace = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker23(out *jwriter.Writer, in flattenedField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DepthLimit != nil {
		const prefix string = ",\"depth_limit\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.DepthLimit.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DepthLimit.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DepthLimit))
		}
	}
	if in.DocValues != nil {
		const prefix string = ",\"doc_values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.DocValues.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DocValues.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DocValues))
		}
	}
	if in.EagerGlobalOrdinals != nil {
		const prefix string = ",\"eager_global_ordinals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.EagerGlobalOrdinals.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.EagerGlobalOrdinals.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.EagerGlobalOrdinals))
		}
	}
	if in.IgnoreAbove != nil {
		const prefix string = ",\"ignore_above\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.IgnoreAbove.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreAbove.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreAbove))
		}
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Index.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Index.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Index))
		}
	}
	if in.IndexOptions != "" {
		const prefix string = ",\"index_options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IndexOptions))
	}
	if in.NullValue != nil {
		const prefix string = ",\"null_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.NullValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NullValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NullValue))
		}
	}
	if in.Similarity != "" {
		const prefix string = ",\"similarity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Similarity))
	}
	if in.SplitQueriesOnWhitespace != nil {
		const prefix string = ",\"split_queries_on_whitespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.SplitQueriesOnWhitespace.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SplitQueriesOnWhitespace.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SplitQueriesOnWhitespace))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v flattenedField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v flattenedField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *flattenedField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *flattenedField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker23(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker24(in *jlexer.Lexer, out *fieldValueFactorParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "modifier":
			out.Modifier = Modifier(in.String())
		case "field":
			out.Field = string(in.String())
		case "missing":
			if m, ok := out.Missing.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Missing.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Missing = in.Interface()
			}
		case "factor":
			if in.IsNull() {
				in.Skip()
				out.Factor = nil
			} else {
				if out.Factor == nil {
					out.Factor = new(float64)
				}
				*out.Factor = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker24(out *jwriter.Writer, in fieldValueFactorParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Modifier != "" {
		const prefix string = ",\"modifier\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Modifier))
	}
	{
		const prefix string = ",\"field\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Field))
	}
	if in.Missing != nil {
		const prefix string = ",\"missing\":"
		out.RawString(prefix)
		if m, ok := in.Missing.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Missing.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Missing))
		}
	}
	if in.Factor != nil {
		const prefix string = ",\"factor\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Factor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v fieldValueFactorParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v fieldValueFactorParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *fieldValueFactorParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *fieldValueFactorParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker24(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker25(in *jlexer.Lexer, out *denseVectorField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dims":
			if m, ok := out.Dimensions.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Dimensions.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Dimensions = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker25(out *jwriter.Writer, in denseVectorField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Dimensions != nil {
		const prefix string = ",\"dims\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Dimensions.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Dimensions.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Dimensions))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v denseVectorField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v denseVectorField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *denseVectorField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *denseVectorField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker25(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker26(in *jlexer.Lexer, out *dateRangeField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coerce":
			if m, ok := out.Coerce.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coerce.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coerce = in.Interface()
			}
		case "index":
			if m, ok := out.Index.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Index.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Index = in.Interface()
			}
		case "store":
			if m, ok := out.Store.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Store.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Store = in.Interface()
			}
		case "format":
			out.Format = string(in.String())
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker26(out *jwriter.Writer, in dateRangeField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Coerce != nil {
		const prefix string = ",\"coerce\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Coerce.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coerce.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coerce))
		}
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Index.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Index.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Index))
		}
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Store.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Store.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Store))
		}
	}
	if in.Format != "" {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dateRangeField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dateRangeField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dateRangeField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dateRangeField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker26(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker27(in *jlexer.Lexer, out *dateField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ignore_malformed":
			if m, ok := out.IgnoreMalformed.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IgnoreMalformed.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IgnoreMalformed = in.Interface()
			}
		case "doc_values":
			if m, ok := out.DocValues.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DocValues.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DocValues = in.Interface()
			}
		case "index":
			if m, ok := out.Index.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Index.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Index = in.Interface()
			}
		case "null_value":
			if m, ok := out.NullValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NullValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NullValue = in.Interface()
			}
		case "store":
			if m, ok := out.Store.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Store.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Store = in.Interface()
			}
		case "meta":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Meta = make(Meta)
				} else {
					out.Meta = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Meta)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "format":
			out.Format = string(in.String())
		case "boost":
			if m, ok := out.Boost.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Boost.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Boost = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker27(out *jwriter.Writer, in dateField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IgnoreMalformed != nil {
		const prefix string = ",\"ignore_malformed\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.IgnoreMalformed.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IgnoreMalformed.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IgnoreMalformed))
		}
	}
	if in.DocValues != nil {
		const prefix string = ",\"doc_values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.DocValues.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DocValues.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DocValues))
		}
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Index.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Index.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Index))
		}
	}
	if in.NullValue != nil {
		const prefix string = ",\"null_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.NullValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NullValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NullValue))
		}
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Store.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Store.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Store))
		}
	}
	if len(in.Meta) != 0 {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Meta {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	if in.Format != "" {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Format))
	}
	if in.Boost != nil {
		const prefix string = ",\"boost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Boost.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Boost.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Boost))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dateField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dateField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dateField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dateField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker27(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker28(in *jlexer.Lexer, out *constantField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker28(out *jwriter.Writer, in constantField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v constantField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v constantField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *constantField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *constantField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker28(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker29(in *jlexer.Lexer, out *completionField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "analyzer":
			out.Analyzer = string(in.String())
		case "search_analyzer":
			out.SearchAnalyzer = string(in.String())
		case "search_quote_analyzer":
			out.SearchQuoteAnalyzer = string(in.String())
		case "preserve_separators":
			if m, ok := out.PreserveSeperators.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PreserveSeperators.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PreserveSeperators = in.Interface()
			}
		case "preserve_position_increments":
			if m, ok := out.PreservePositionIncrements.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PreservePositionIncrements.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PreservePositionIncrements = in.Interface()
			}
		case "max_input_length":
			if m, ok := out.MaxInputLength.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxInputLength.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxInputLength = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker29(out *jwriter.Writer, in completionField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Analyzer != "" {
		const prefix string = ",\"analyzer\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Analyzer))
	}
	if in.SearchAnalyzer != "" {
		const prefix string = ",\"search_analyzer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SearchAnalyzer))
	}
	if in.SearchQuoteAnalyzer != "" {
		const prefix string = ",\"search_quote_analyzer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SearchQuoteAnalyzer))
	}
	if in.PreserveSeperators != nil {
		const prefix string = ",\"preserve_separators\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.PreserveSeperators.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PreserveSeperators.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PreserveSeperators))
		}
	}
	if in.PreservePositionIncrements != nil {
		const prefix string = ",\"preserve_position_increments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.PreservePositionIncrements.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PreservePositionIncrements.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PreservePositionIncrements))
		}
	}
	if in.MaxInputLength != nil {
		const prefix string = ",\"max_input_length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MaxInputLength.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxInputLength.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxInputLength))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v completionField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v completionField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *completionField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *completionField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker29(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker30(in *jlexer.Lexer, out *booleanField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "doc_values":
			if m, ok := out.DocValues.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DocValues.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DocValues = in.Interface()
			}
		case "index":
			if m, ok := out.Index.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Index.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Index = in.Interface()
			}
		case "null_value":
			if m, ok := out.NullValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NullValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NullValue = in.Interface()
			}
		case "store":
			if m, ok := out.Store.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Store.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Store = in.Interface()
			}
		case "meta":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Meta = make(map[string]string)
				} else {
					out.Meta = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.Meta)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker30(out *jwriter.Writer, in booleanField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DocValues != nil {
		const prefix string = ",\"doc_values\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.DocValues.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DocValues.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DocValues))
		}
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Index.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Index.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Index))
		}
	}
	if in.NullValue != nil {
		const prefix string = ",\"null_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.NullValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NullValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NullValue))
		}
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Store.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Store.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Store))
		}
	}
	if len(in.Meta) != 0 {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Meta {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v booleanField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v booleanField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *booleanField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *booleanField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker30(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker31(in *jlexer.Lexer, out *binaryField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "doc_values":
			if m, ok := out.DocValues.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DocValues.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DocValues = in.Interface()
			}
		case "store":
			if m, ok := out.Store.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Store.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Store = in.Interface()
			}
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker31(out *jwriter.Writer, in binaryField) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DocValues != nil {
		const prefix string = ",\"doc_values\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.DocValues.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DocValues.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DocValues))
		}
	}
	if in.Store != nil {
		const prefix string = ",\"store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Store.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Store.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Store))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v binaryField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v binaryField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *binaryField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *binaryField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker31(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker32(in *jlexer.Lexer, out *anyOfRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "intervals":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Intervals).UnmarshalJSON(data))
			}
		case "filter":
			if in.IsNull() {
				in.Skip()
				out.Filter = nil
			} else {
				if out.Filter == nil {
					out.Filter = new(RuleFilter)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Filter).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker32(out *jwriter.Writer, in anyOfRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"intervals\":"
		out.RawString(prefix[1:])
		out.Raw((in.Intervals).MarshalJSON())
	}
	if in.Filter != nil {
		const prefix string = ",\"filter\":"
		out.RawString(prefix)
		out.Raw((*in.Filter).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v anyOfRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v anyOfRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *anyOfRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *anyOfRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker32(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker33(in *jlexer.Lexer, out *allOfRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "intervals":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Intervals).UnmarshalJSON(data))
			}
		case "ordered":
			if m, ok := out.Ordered.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ordered.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ordered = in.Interface()
			}
		case "filter":
			if in.IsNull() {
				in.Skip()
				out.Filter = nil
			} else {
				if out.Filter == nil {
					out.Filter = new(RuleFilter)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Filter).UnmarshalJSON(data))
				}
			}
		case "max_gaps":
			if m, ok := out.MaxGaps.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MaxGaps.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MaxGaps = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker33(out *jwriter.Writer, in allOfRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"intervals\":"
		out.RawString(prefix[1:])
		out.Raw((in.Intervals).MarshalJSON())
	}
	if in.Ordered != nil {
		const prefix string = ",\"ordered\":"
		out.RawString(prefix)
		if m, ok := in.Ordered.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ordered.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ordered))
		}
	}
	if in.Filter != nil {
		const prefix string = ",\"filter\":"
		out.RawString(prefix)
		out.Raw((*in.Filter).MarshalJSON())
	}
	if in.MaxGaps != nil {
		const prefix string = ",\"max_gaps\":"
		out.RawString(prefix)
		if m, ok := in.MaxGaps.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MaxGaps.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MaxGaps))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v allOfRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v allOfRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *allOfRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *allOfRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker33(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker34(in *jlexer.Lexer, out *aliasField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "type":
			out.Type = FieldType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker34(out *jwriter.Writer, in aliasField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v aliasField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v aliasField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *aliasField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *aliasField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker34(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker35(in *jlexer.Lexer, out *Vertices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "top":
			if m, ok := out.Top.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Top.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Top = in.Interface()
			}
		case "bottom":
			if m, ok := out.Bottom.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Bottom.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Bottom = in.Interface()
			}
		case "left":
			if m, ok := out.Left.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Left.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Left = in.Interface()
			}
		case "right":
			if m, ok := out.Right.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Right.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Right = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker35(out *jwriter.Writer, in Vertices) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"top\":"
		out.RawString(prefix[1:])
		if m, ok := in.Top.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Top.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Top))
		}
	}
	{
		const prefix string = ",\"bottom\":"
		out.RawString(prefix)
		if m, ok := in.Bottom.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Bottom.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Bottom))
		}
	}
	{
		const prefix string = ",\"left\":"
		out.RawString(prefix)
		if m, ok := in.Left.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Left.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Left))
		}
	}
	{
		const prefix string = ",\"right\":"
		out.RawString(prefix)
		if m, ok := in.Right.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Right.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Right))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vertices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vertices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vertices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vertices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker35(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker36(in *jlexer.Lexer, out *LatLon) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker36(out *jwriter.Writer, in LatLon) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"lon\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LatLon) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LatLon) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LatLon) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LatLon) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker36(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker37(in *jlexer.Lexer, out *IndexedShape) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "routing":
			out.Routing = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker37(out *jwriter.Writer, in IndexedShape) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Routing != "" {
		const prefix string = ",\"routing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Routing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexedShape) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexedShape) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexedShape) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexedShape) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker37(l, v)
}
func easyjson390b7126DecodeGithubComChancedPicker38(in *jlexer.Lexer, out *BoundingBox) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "top_left":
			if m, ok := out.TopLeft.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.TopLeft.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.TopLeft = in.Interface()
			}
		case "bottom_right":
			if m, ok := out.BottomRight.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.BottomRight.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.BottomRight = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson390b7126EncodeGithubComChancedPicker38(out *jwriter.Writer, in BoundingBox) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"top_left\":"
		out.RawString(prefix[1:])
		if m, ok := in.TopLeft.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.TopLeft.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.TopLeft))
		}
	}
	{
		const prefix string = ",\"bottom_right\":"
		out.RawString(prefix)
		if m, ok := in.BottomRight.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.BottomRight.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.BottomRight))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoundingBox) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson390b7126EncodeGithubComChancedPicker38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoundingBox) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson390b7126EncodeGithubComChancedPicker38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoundingBox) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson390b7126DecodeGithubComChancedPicker38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoundingBox) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson390b7126DecodeGithubComChancedPicker38(l, v)
}
